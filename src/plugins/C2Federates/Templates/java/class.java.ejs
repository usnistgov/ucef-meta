<% /*
input properties
----------------
alldatamembers       array
classname            string
codeclassname        string
datamembers          array
ejs                  ejs
helpers              object
hlaclassname         string
isc2winteractionroot boolean
isinteraction        boolean
parentclassname      string
simname              string
TEMPLATES            object

used in
-------
JavaRTI.js

*/ -%>

import java.util.HashSet;
import java.util.Set;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.cpswt.utils.CpswtUtils;

<% if(isinteraction){ -%>
import hla.rti.FederateNotExecutionMember;
import hla.rti.InteractionClassNotDefined;
import hla.rti.InteractionClassNotPublished;
import hla.rti.InteractionClassNotSubscribed;
import hla.rti.LogicalTime;
import hla.rti.NameNotFound;
import hla.rti.RTIambassador;
import hla.rti.ReceivedInteraction;
<% } else { -%>
import hla.rti.AttributeHandleSet;
import hla.rti.FederateNotExecutionMember;
import hla.rti.LogicalTime;
import hla.rti.NameNotFound;
import hla.rti.ObjectClassNotDefined;
import hla.rti.ObjectClassNotPublished;
import hla.rti.ObjectClassNotSubscribed;
import hla.rti.RTIambassador;
import hla.rti.ReflectedAttributes;
import hla.rti.SuppliedAttributes;
<% } -%>
<% if(simname !== 'org.cpswt.hla'){ -%>

import org.cpswt.hla.*;
<% } -%>

/**
* Implements <%=hlaclassname%>
*/
public class <%=codeclassname%> extends <%=parentclassname%> {

    private static final Logger logger = LogManager.getLogger();

    /**
    * Creates an instance of the <%=codeclassname%> <%=isinteraction?"interaction":"object"%> class with default <%=isinteraction?"parameter":"attribute"%> values.
    */
    public <%=codeclassname%>() {}
<% if(alldatamembers && alldatamembers.length > 0){ -%>

<% /*alldatamembers:handle()*/ -%>
<% alldatamembers.forEach(function(datamember){ -%>
    private static int _<%=datamember.name%>_handle;
<% }); -%>
<% } -%>

<% /*classcommon(...)*/ -%>
<%- ejs.render(TEMPLATES["java/classcommon.java.ejs"],
    {alldatamembers: alldatamembers,
     classname: classname,
     codeclassname: codeclassname,
     datamembers: datamembers,
     hlaclassname: hlaclassname,
     isinteraction: isinteraction,
     parentclassname: parentclassname
}) -%>
<% if(isc2winteractionroot){ -%>

    @Override
    public void sendInteraction( RTIambassador rti, double time ) {
        if (  get_sourceFed() == null || "".equals( get_sourceFed() ) || get_originFed() == null || "".equals( get_originFed() )  ) {
            throw new Exception( "source and/or origin federate not specified." );
        }
        super.sendInteraction( rti, time );
    }

    @Override
    public void sendInteraction( RTIambassador rti ) {
        if (  get_sourceFed() == null || "".equals( get_sourceFed() ) || get_originFed() == null || "".equals( get_originFed() )  ) {
            throw new Exception( "source and/or origin federate not specified." );
        }
        super.sendInteraction( rti );
    }
<% } -%>
<% if(isinteraction){ -%>
<% if(datamembers && datamembers.length > 0){ -%>

<% datamembers.forEach(function(parameter){ -%>
<% /*datamembers:interactionmembers()*/ -%>
    private <%=parameter.parameterType%> _<%=parameter.name%> = <%-helpers.initialvalue(parameter.parameterType)%>;
<% }); -%>

<% datamembers.forEach(function(parameter){ -%>
<% /*datamembers:interactionsetters()*/ -%>
    /**
    * Set the value of the "<%=parameter.name%>" parameter to "value" for this parameter.
    *
    * @param value the new value for the "<%=parameter.name%>" parameter
    */
    public void set_<%=parameter.name%>( <%=parameter.parameterType%> value ) {
        _<%=parameter.name%> = value;
    }

<% /*datamembers:interactiongetters()*/ -%>
    /**
    * Returns the value of the "<%=parameter.name%>" parameter of this interaction.
    *
    * @return the value of the "<%=parameter.name%>" parameter
    */
    public <%=parameter.parameterType%> get_<%=parameter.name%>() {
        return _<%=parameter.name%>;
    }
<% }); -%>
<% } -%>
<% }else{ %>
<% alldatamembers.forEach(function(attribute){ -%>

<% /* alldatamembers:{ a |<publish(attribute=a)> } */ -%>
    /**
    * Publishes the "<%=attribute.name%>" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "<%=attribute.name%>" attribute for publication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void publish_<%=attribute.name%>() {
        _publishAttributeNameSet.add( "<%=attribute.name%>" );
    }

    /**
    * Unpublishes the "<%=attribute.name%>" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "<%=attribute.name%>" attribute for unpublication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void unpublish_<%=attribute.name%>() {
        _publishAttributeNameSet.remove( "<%=attribute.name%>" );
    }

<% /* alldatamembers:{ a |<subscribe(attribute=a)> } */ -%>
    /**
    * Subscribes a federate to the "<%=attribute.name%>" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "<%=attribute.name%>" attribute for subscription.
    * To actually subscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void subscribe_<%=attribute.name%>() {
        _subscribeAttributeNameSet.add( "<%=attribute.name%>" );
    }

    /**
    * Unsubscribes a federate from the "<%=attribute.name%>" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "<%=attribute.name%>" attribute for unsubscription.
    * To actually unsubscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void unsubscribe_<%=attribute.name%>() {
        _subscribeAttributeNameSet.remove( "<%=attribute.name%>" );
    }
<% }); -%>
<% datamembers.forEach(function(datamember){ -%>

<% /*datamembers:objectmembers()*/ -%>
    protected Attribute< <%= helpers.primitive2object(datamember.parameterType) %> > _<%=datamember.name%> =
            new Attribute< <%= helpers.primitive2object(datamember.parameterType) %> >(  new <%= helpers.primitive2object(datamember.parameterType)%>( <%-helpers.initialvalue(datamember.parameterType)%> )  );

<% /*datamembers:objectsetters()*/ -%>
    /**
    * Set the value of the "<%=datamember.name%>" attribute to "value" for this object.
    *
    * @param value the new value for the "<%=datamember.name%>" attribute
    */
    public void set_<%=datamember.name%>( <%=datamember.parameterType%> value ) {
        _<%=datamember.name%>.setValue( value );
        _<%=datamember.name%>.setTime( getTime() );
    }

<% /*datamembers:objectgetters()*/ -%>
    /**
    * Returns the value of the "<%=datamember.name%>" attribute of this object.
    *
    * @return the value of the "<%=datamember.name%>" attribute
    */
    public <%=datamember.parameterType%> get_<%=datamember.name%>() {
        return _<%=datamember.name%>.getValue();
    }

<% /*datamembers:objecttimegetters()*/ -%>
    /**
    * Returns the current timestamp of the "<%=datamember.name%>" attribute of this object.
    *
    * @return the current timestamp of the "<%=datamember.name%>" attribute
    */
    public double get_<%=datamember.name%>_time() {
        return _<%=datamember.name%>.getTime();
    }
<% }); -%>
<% } -%>

    protected <%=codeclassname%>( <%=isinteraction?"ReceivedInteraction":"ReflectedAttributes"%> datamemberMap, boolean initFlag ) {
        super( datamemberMap, false );
        if ( initFlag ) set<%= isinteraction ? "Parameter" : "Attribute" %>s( datamemberMap );
    }

    protected <%=codeclassname%>( <%=isinteraction?"ReceivedInteraction":"ReflectedAttributes"%> datamemberMap, LogicalTime logicalTime, boolean initFlag ) {
        super( datamemberMap, logicalTime, false );
        if ( initFlag ) set<%= isinteraction ? "Parameter" : "Attribute" %>s( datamemberMap );
    }

    /**
    * Creates an instance of the <%=classname%> <%=isinteraction?"interaction":"object"%> class, using
    * "datamemberMap" to initialize its <%=isinteraction?"parameter":"attribute"%> values.
    * "datamemberMap" is usually acquired as an argument to an RTI federate
    * callback method, such as "receiveInteraction".
    *
    * @param datamemberMap data structure containing initial values for the
    * <%=isinteraction?"parameter":"attribute"%>s of this new <%=classname%> <%=isinteraction?"interaction":"object"%> class instance
    */
    public <%=codeclassname%>( <%=isinteraction?"ReceivedInteraction":"ReflectedAttributes"%> datamemberMap ) {
        this( datamemberMap, true );
    }

    /**
    * Like {@link #<%=classname%>( <%=isinteraction?"ReceivedInteraction":"ReflectedAttributes"%> datamemberMap )}, except this
    * new <%=classname%> <%=isinteraction?"interaction":"object"%> class instance is given a timestamp of
    * "logicalTime".
    *
    * @param datamemberMap data structure containing initial values for the
    * <%=isinteraction?"parameter":"attribute"%>s of this new <%=classname%> <%=isinteraction?"interaction":"object"%> class instance
    * @param logicalTime timestamp for this new <%=classname%> <%=isinteraction?"interaction":"object"%> class
    * instance
    */
    public <%=codeclassname%>( <%=isinteraction?"ReceivedInteraction":"ReflectedAttributes"%> datamemberMap, LogicalTime logicalTime ) {
        this( datamemberMap, logicalTime, true );
    }

    /**
    * Creates a new <%=classname%> <%=isinteraction?"interaction":"object"%> class instance that is a duplicate
    * of the instance referred to by <%=classname%>_var.
    *
    * @param <%=classname%>_var <%=classname%> <%=isinteraction?"interaction":"object"%> class instance of which
    * this newly created <%=classname%> <%=isinteraction?"interaction":"object"%> class instance will be a
    * duplicate
    */
    public <%=codeclassname%>( <%=codeclassname%> <%=classname%>_var ) {
        super( <%=classname%>_var );
<% if(datamembers && datamembers.length > 0){ -%>

<% /*datamembers:{ d |<rticlasscopyvalue(classname=classname,datamember=d)>}*/ -%>
<% datamembers.forEach(function(datamember){ -%>
        set_<%=datamember.name%>( <%=classname%>_var.get_<%=datamember.name%>() );
<% }); -%>
<% } -%>
    }
<% if(datamembers && datamembers.length > 0){ -%>

    /**
    * Returns the value of the <%=isinteraction?"parameter":"attribute"%> whose name is "datamemberName"
    * for this <%=isinteraction?"interaction":"object"%>.
    *
    * @param datamemberName name of <%=isinteraction?"parameter":"attribute"%> whose value is to be
    * returned
    * @return value of the <%=isinteraction?"parameter":"attribute"%> whose name is "datamemberName"
    * for this <%=isinteraction?"interaction":"object"%>
    */
    public Object get<%= isinteraction ? "Parameter" : "Attribute" %>( String datamemberName ) {
<% /*first(datamembers):startgetbyname()*/ -%>
<% /*rest(datamembers):continuegetbyname()*/ -%>
<% for(var i = 0; i<datamembers.length; i++ ){ -%>
        <%= i == 0  ? 'if' : 'else if'%> ( "<%=datamembers[i].name%>".equals(datamemberName) ) return <%=helpers.get(datamembers[i].parameterType, datamembers[i].name)%>;
<% } -%>
        else return super.get<%= isinteraction ? "Parameter" : "Attribute" %>( datamemberName );
    }

    protected boolean set<%= isinteraction ? "Parameter" : "Attribute" %>Aux( String datamemberName, String val ) {
        boolean retval = true;
<% /*first(datamembers):startifstring()*/ -%>
<% /*rest(datamembers):continueifstring()*/ -%>
<% for(var i = 0; i<datamembers.length; i++ ){ -%>
        <%= i == 0  ? 'if' : 'else if'%> ( "<%=datamembers[i].name%>".equals( datamemberName) ) set_<%=datamembers[i].name%>( <%=helpers.set(datamembers[i].parameterType)%> );
<% } -%>
        else retval = super.set<%= isinteraction ? "Parameter" : "Attribute" %>Aux( datamemberName, val );

        return retval;
    }

    protected boolean set<%= isinteraction ? "Parameter" : "Attribute" %>Aux( String datamemberName, Object val ) {
        boolean retval = true;
<% /*first(datamembers):startifname()*/ -%>
<% /*rest(datamembers):continueifname()*/ -%>
<% for(var i = 0; i<datamembers.length; i++ ){ -%>
        <%= i == 0  ? 'if' : 'else if'%> ( "<%=datamembers[i].name%>".equals( datamemberName) ) set_<%=datamembers[i].name%>( (<%= helpers.primitive2object(datamembers[i].parameterType)%>)val );
<% } -%>
        else retval = super.set<%= isinteraction ? "Parameter" : "Attribute" %>Aux( datamemberName, val );

        return retval;
    }
<% } -%>
<% if(!isinteraction){ -%>

    @Override
    protected SuppliedAttributes createSuppliedDatamembers(boolean force) {
        SuppliedAttributes datamembers = _factory.createSuppliedAttributes();
 <% alldatamembers.forEach(function(datamember){ -%>

        if (_publishAttributeNameSet.contains("<%=datamember.name%>") && _<%=datamember.name%>.shouldBeUpdated(force)) {
            datamembers.add( getAttributeHandle("<%=datamember.name%>"), getAttribute("<%=datamember.name%>").toString().getBytes() );
            _<%=datamember.name%>.setHasBeenUpdated();
        }
<% }); -%>

        return datamembers;
    }
<% } -%>

    public void copyFrom( Object object ) {
        super.copyFrom( object );
        if ( object instanceof <%=codeclassname%> ) {
            <%=codeclassname%> data = (<%=codeclassname%>)object;
<% /*datamembers:copydatamember();separator = "\n"*/ -%>
<% datamembers.forEach(function(datamember){ -%>
            _<%=datamember.name%> = data._<%=datamember.name%>;
<% }); -%>
        }
    }
}

