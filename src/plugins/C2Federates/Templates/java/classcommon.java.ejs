<% /*
input properties
----------------
alldatamembers
classname
codeclassname
datamembers
hlaclassname
isinteraction
parentclassname

used in
-------
class.java.ejs
classroot.java.ejs

*/ -%>
<% var IntOb = isinteraction ? "Interaction" : "Object"; -%>
<% var intob = isinteraction ? "interaction" : "object"; -%>
<% var Field = isinteraction ? "Parameter" : "Attribute"; -%>
<% var field = isinteraction ? "parameter" : "attribute"; -%>
    private static boolean _isInitialized = false;

    private static int _handle;

    /**
    * Returns the handle (RTI assigned) of the <%=classname%> <%=intob%> class.
    * Note: As this is a static method, it is NOT polymorphic, and so, if called on
    * a reference will return the handle of the class pertaining to the reference,
    * rather than the handle of the class for the instance referred to by the reference.
    * For the polymorphic version of this method, use {@link #getClassHandle()}.
    *
    * @return the RTI assigned integer handle that represents this <%=intob%> class
    */
    public static int get_handle() {
        return _handle;
    }

    /**
    * Returns the fully-qualified (dot-delimited) name of the <%=classname%> <%=intob%> class.
    * Note: As this is a static method, it is NOT polymorphic, and so, if called on
    * a reference will return the name of the class pertaining to the reference,
    * rather than the name of the class for the instance referred to by the reference.
    * For the polymorphic version of this method, use {@link #getClassName()}.
    *
    * @return the fully-qualified HLA class path for this <%=intob%> class
    */
    public static String get_class_name() {
        return "<%=hlaclassname%>";
    }

    /**
    * Returns the simple name (the last name in the dot-delimited fully-qualified
    * class name) of the <%=classname%> <%=intob%> class.
    *
    * @return the name of this <%=intob%> class
    */
    public static String get_simple_class_name() {
        return "<%=classname%>";
    }

    private static Set< String > _datamemberNames = new HashSet< String >();
    private static Set< String > _allDatamemberNames = new HashSet< String >();

    /**
    * Returns a set containing the names of all of the non-hidden <%=field%>s in the
    * <%=classname%> <%=intob%> class.
    * Note: As this is a static method, it is NOT polymorphic, and so, if called on
    * a reference will return a set of parameter names pertaining to the reference,
    * rather than the parameter names of the class for the instance referred to by
    * the reference.  For the polymorphic version of this method, use
    * {@link #get<%=Field%>Names()}.
    *
    * @return a modifiable set of the non-hidden <%=field%> names for this <%=intob%> class
    */
    public static Set< String > get_<%=field%>_names() {
        return new HashSet< String >(_datamemberNames);
    }

    /**
    * Returns a set containing the names of all of the <%=field%>s in the
    * <%=classname%> <%=intob%> class.
    * Note: As this is a static method, it is NOT polymorphic, and so, if called on
    * a reference will return a set of parameter names pertaining to the reference,
    * rather than the parameter names of the class for the instance referred to by
    * the reference.  For the polymorphic version of this method, use
    * {@link #get<%=Field%>Names()}.
    *
    * @return a modifiable set of the <%=field%> names for this <%=intob%> class
    */
    public static Set< String > get_all_<%=field%>_names() {
        return new HashSet< String >(_allDatamemberNames);
    }
<% if(!isinteraction){ -%>

    private static Set< String > _publishAttributeNameSet = new HashSet< String >();
    private static Set< String > _subscribeAttributeNameSet = new HashSet< String >();
<% } -%>

    static {
        _classNameSet.add("<%= hlaclassname %>");
        _classNameClassMap.put("<%= hlaclassname %>", <%= codeclassname %>.class);

        _datamemberClassNameSetMap.put("<%= hlaclassname %>", _datamemberNames);
        _allDatamemberClassNameSetMap.put("<%= hlaclassname %>", _allDatamemberNames);
<% if(datamembers && datamembers.length > 0){ -%>

<% /*datamembers:initDatamemberNameSet()*/ -%>
<% datamembers.forEach(function(datamember){ -%>
<% if(!datamember.hidden && !datamember.inherited){ -%>
        _datamemberNames.add("<%=datamember.name%>");
<% } -%>
<% }); -%>

<% /*datamembers:initDatamemberTypeMap()*/ -%>
<% datamembers.forEach(function(datamember){ -%>
        _datamemberTypeMap.put("<%=datamember.name%>", "<%=datamember.parameterType%>");
<% }); -%>
<% } -%>
<% if(alldatamembers && alldatamembers.length > 0){ -%>

<% /*alldatamembers:initAllDatamemberNameSet()*/ -%>
<% alldatamembers.forEach(function(datamember){ -%>
        _allDatamemberNames.add("<%=datamember.name%>");
<% }); -%>
<% } -%>
<% if(!isinteraction){ -%>

        _classNamePublishAttributeNameMap.put("<%= hlaclassname %>", _publishAttributeNameSet);
        _classNameSubscribeAttributeNameMap.put("<%= hlaclassname %>", _subscribeAttributeNameSet);
<% } -%>
    }

    protected static void init(RTIambassador rti) {
        if (_isInitialized) return;
        _isInitialized = true;

        <% if(parentclassname){ %><%=parentclassname%>.init(rti);<%}%>

        boolean isNotInitialized = true;
        while(isNotInitialized) {
            try {
                _handle = rti.get<%=IntOb%>ClassHandle("<%= hlaclassname %>");
                isNotInitialized = false;
            } catch (FederateNotExecutionMember e) {
                logger.error("could not initialize: Federate Not Execution Member", e);
                return;
            } catch (NameNotFound e) {
                logger.error("could not initialize: Name Not Found", e);
                return;
            } catch (Exception e) {
                logger.error(e);
                CpswtUtils.sleepDefault();
            }
        }

        _classNameHandleMap.put("<%= hlaclassname %>", get_handle());
        _classHandleNameMap.put(get_handle(), "<%= hlaclassname %>");
        _classHandleSimpleNameMap.put(get_handle(), "<%=classname%>");
<% if(alldatamembers && alldatamembers.length > 0){ -%>

        isNotInitialized = true;
        while(isNotInitialized) {
            try {
<% /*alldatamembers:handle_init()*/ -%>
<% alldatamembers.forEach(function(datamember){ -%>
                _<%=datamember.name%>_handle = rti.get<%=Field%>Handle("<%=datamember.name%>", get_handle());
<% }); -%>
                isNotInitialized = false;
            } catch (FederateNotExecutionMember e) {
                logger.error("could not initialize: Federate Not Execution Member", e);
                return;
            } catch (<%=IntOb%>ClassNotDefined e) {
                logger.error("could not initialize: <%=IntOb%> Class Not Defined", e);
                return;
            } catch (NameNotFound e) {
                logger.error("could not initialize: Name Not Found", e);
                return;
            } catch (Exception e) {
                logger.error(e);
                CpswtUtils.sleepDefault();
            }
        }

<% /*alldatamembers: { d |<initDatamemberNameHandleMap(hlaclassname=hlaclassname,datamember=d)>}*/ -%>
<% alldatamembers.forEach(function(datamember){ -%>
        _datamemberNameHandleMap.put("<%=hlaclassname%>.<%=datamember.name%>", _<%=datamember.name%>_handle);
<% }); -%>

<% /*alldatamembers:initDatamemberHandleNameMap()*/ -%>
<% alldatamembers.forEach(function(datamember){ -%>
        _datamemberHandleNameMap.put(_<%=datamember.name%>_handle, "<%=datamember.name%>");
<% }); -%>
<% } -%>
    }

    private static boolean _isPublished = false;

    /**
    * Publishes the <%=classname%> <%=intob%> class for a federate.
    *
    * @param rti handle to the Local RTI Component
    */
    public static void publish(RTIambassador rti) {
        if (_isPublished) return;

        init(rti);
<% if(!isinteraction){ -%>

        AttributeHandleSet publishedAttributeHandleSet = _factory.createAttributeHandleSet();
        for(String attributeName : _publishAttributeNameSet) {
            try {
                publishedAttributeHandleSet.add(_datamemberNameHandleMap.get("<%= hlaclassname %>." + attributeName));
                logger.trace("publish {}:{}", get_class_name(), attributeName);
            } catch (Exception e) {
                logger.error("could not publish \"" + attributeName + "\" attribute.", e);
            }
        }
<% } -%>

        synchronized(rti) {
            boolean isNotPublished = true;
            while(isNotPublished) {
                try {
                    rti.publish<%=IntOb%>Class(get_handle()<% if(!isinteraction){ %>, publishedAttributeHandleSet<%}%>);
                    isNotPublished = false;
                } catch (FederateNotExecutionMember e) {
                    logger.error("could not publish: Federate Not Execution Member", e);
                    return;
                } catch (<%=IntOb%>ClassNotDefined e) {
                    logger.error("could not publish: <%=IntOb%> Class Not Defined", e);
                    return;
                } catch (Exception e) {
                    logger.error(e);
                    CpswtUtils.sleepDefault();
                }
            }
        }

        _isPublished = true;
        logger.debug("publish: {}", get_class_name());
    }

    /**
    * Unpublishes the <%=classname%> <%=intob%> class for a federate.
    *
    * @param rti handle to the Local RTI Component
    */
    public static void unpublish(RTIambassador rti) {
        if (!_isPublished) return;

        init(rti);

        synchronized(rti) {
            boolean isNotUnpublished = true;
            while(isNotUnpublished) {
                try {
                    rti.unpublish<%=IntOb%>Class(get_handle());
                    isNotUnpublished = false;
                } catch (FederateNotExecutionMember e) {
                    logger.error("could not unpublish: Federate Not Execution Member", e);
                    return;
                } catch (<%=IntOb%>ClassNotDefined e) {
                    logger.error("could not unpublish: <%=IntOb%> Class Not Defined", e);
                    return;
                } catch (<%=IntOb%>ClassNotPublished e) {
                    logger.error("could not unpublish: <%=IntOb%> Class Not Published", e);
                    return;
                } catch (Exception e) {
                    logger.error(e);
                    CpswtUtils.sleepDefault();
                }
            }
        }

        _isPublished = false;
        logger.debug("unpublish: {}", get_class_name());
    }

    private static boolean _isSubscribed = false;

    /**
    * Subscribes a federate to the <%=classname%> <%=intob%> class.
    *
    * @param rti handle to the Local RTI Component
    */
    public static void subscribe(RTIambassador rti) {
        if (_isSubscribed) return;

        init(rti);
<% if(!isinteraction){ -%>

        AttributeHandleSet subscribedAttributeHandleSet = _factory.createAttributeHandleSet();
        for(String attributeName : _subscribeAttributeNameSet) {
            try {
                subscribedAttributeHandleSet.add(_datamemberNameHandleMap.get("<%= hlaclassname %>." + attributeName));
                logger.trace("subscribe {}:{}", get_class_name(), attributeName);
            } catch (Exception e) {
                logger.error("could not subscribe to \"" + attributeName + "\" attribute.", e);
            }
        }
<% } -%>

        synchronized(rti) {
            boolean isNotSubscribed = true;
            while(isNotSubscribed) {
                try {
                    rti.subscribe<% if(isinteraction){ %>InteractionClass(get_handle())<% }else{ %>ObjectClassAttributes(get_handle(), subscribedAttributeHandleSet)<%}%>;
                    isNotSubscribed = false;
                } catch (FederateNotExecutionMember e) {
                    logger.error("could not subscribe: Federate Not Execution Member", e);
                    return;
                } catch (<%=IntOb%>ClassNotDefined e) {
                    logger.error("could not subscribe: <%=IntOb%> Class Not Defined", e);
                    return;
                } catch (Exception e) {
                    logger.error(e);
                    CpswtUtils.sleepDefault();
                }
            }
        }

        _isSubscribed = true;
        logger.debug("subscribe: {}", get_class_name());
    }

    /**
    * Unsubscribes a federate from the <%=classname%> <%=intob%> class.
    *
    * @param rti handle to the Local RTI Component
    */
    public static void unsubscribe(RTIambassador rti) {
        if (!_isSubscribed) return;

        init(rti);

        synchronized(rti) {
            boolean isNotUnsubscribed = true;
            while(isNotUnsubscribed) {
                try {
                    rti.unsubscribe<%=IntOb%>Class(get_handle());
                    isNotUnsubscribed = false;
                } catch (FederateNotExecutionMember e) {
                    logger.error("could not unsubscribe: Federate Not Execution Member", e);
                    return;
                } catch (<%=IntOb%>ClassNotDefined e) {
                    logger.error("could not unsubscribe: <%=IntOb%> Class Not Defined", e);
                    return;
                } catch (<%=IntOb%>ClassNotSubscribed e) {
                    logger.error("could not unsubscribe: <%=IntOb%> Class Not Subscribed", e);
                    return;
                } catch (Exception e) {
                    logger.error(e);
                    CpswtUtils.sleepDefault();
                }
            }
        }

        _isSubscribed = false;
        logger.debug("unsubscribe: {}", get_class_name());
    }

    /**
    * Return true if "handle" is equal to the handle (RTI assigned) of this class
    * (that is, the <%=classname%> <%=intob%> class).
    *
    * @param handle handle to compare to the value of the handle (RTI assigned) of
    * this class (the <%=classname%> <%=intob%> class).
    * @return "true" if "handle" matches the value of the handle of this class
    * (that is, the <%=classname%> <%=intob%> class).
    */
    public static boolean match(int handle) {
        return handle == get_handle();
    }

    /**
    * Returns the handle (RTI assigned) of this instance's <%=intob%> class .
    *
    * @return the handle (RTI assigned) if this instance's <%=intob%> class
    */
    public int getClassHandle() {
        return get_handle();
    }

    /**
    * Returns the fully-qualified (dot-delimited) name of this instance's <%=intob%> class.
    *
    * @return the fully-qualified (dot-delimited) name of this instance's <%=intob%> class
    */
    public String getClassName() {
        return get_class_name();
    }

    /**
    * Returns the simple name (last name in its fully-qualified dot-delimited name)
    * of this instance's <%=intob%> class.
    *
    * @return the simple name of this instance's <%=intob%> class
    */
    public String getSimpleClassName() {
        return get_simple_class_name();
    }

    /**
    * Returns a set containing the names of all of the non-hidden<%=field%>s of an
    * <%=intob%> class instance.
    *
    * @return set containing the names of all of the <%=field%>s of an
    * <%=intob%> class instance
    */
    public Set< String > get<%=Field%>Names() {
        return get_<%=field%>_names();
    }

    /**
    * Returns a set containing the names of all of the <%=field%>s of an
    * <%=intob%> class instance.
    *
    * @return set containing the names of all of the <%=field%>s of an
    * <%=intob%> class instance
    */
    public Set< String > getAll<%=Field%>Names() {
        return get_all_<%=field%>_names();
    }
<% if(alldatamembers && alldatamembers.length > 0){ -%>

    @Override
    public String get<%=Field%>Name(int datamemberHandle) {
<% for(var i = 0; i<alldatamembers.length; i++ ){ -%>
        <%= i == 0 ? 'if' : 'else if'%> (datamemberHandle == _<%=alldatamembers[i].name%>_handle) return "<%=alldatamembers[i].name%>";
<% } -%>
        else return super.get<%=Field%>Name(datamemberHandle);
    }
<% } -%>

    /**
    * Publishes the <%=intob%> class of this instance of the class for a federate.
    *
    * @param rti handle to the Local RTI Component
    */
    public void publish<%=IntOb%>(RTIambassador rti) {
        publish(rti);
    }

    /**
    * Unpublishes the <%=intob%> class of this instance of this class for a federate.
    *
    * @param rti handle to the Local RTI Component
    */
    public void unpublish<%=IntOb%>(RTIambassador rti) {
        unpublish(rti);
    }

    /**
    * Subscribes a federate to the <%=intob%> class of this instance of this class.
    *
    * @param rti handle to the Local RTI Component
    */
    public void subscribe<%=IntOb%>(RTIambassador rti) {
        subscribe(rti);
    }

    /**
    * Unsubscribes a federate from the <%=intob%> class of this instance of this class.
    *
    * @param rti handle to the Local RTI Component
    */
    public void unsubscribe<%=IntOb%>(RTIambassador rti) {
        unsubscribe(rti);
    }

    @Override
    public String toString() {
        return getClass().getName() + "("
<% /*alldatamembers:stringValue(); separator="+ \",\""*/ -%>
<% var separator = false; alldatamembers.forEach(function(datamember){ -%>
                <%if(separator){%>+ "," <%}else{separator=true;}%>+ "<%=datamember.name%>:" + get_<%=datamember.name%>()
<% }); -%>
                + ")";
    }
