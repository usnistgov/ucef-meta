<% /*
input properties
----------------
allinteractiondata
allobjectdata
asynchronousdelivery
classname
melderpackagename
publishedinteractiondata
publishedobjectdata
subscribedinteractiondata
subscribedobjectdata
timeconstrained
timeregulating
(and others not used)

used in
-------
JavaImplFederate.js

*/ -%>
package <%= groupId %>.<%= classname.toLowerCase() %>;

<% if(publishedinteractiondata.length || subscribedinteractiondata.length || publishedobjectdata.length || subscribedobjectdata.length) { -%>
import <%= groupId %>.<%= classname.toLowerCase() %>.rti.*;
<% } -%>

import hla.rti.EventRetractionHandle;
import hla.rti.LogicalTime;
import hla.rti.ReceivedInteraction;

import org.cpswt.hla.C2WInteractionRoot;
import org.cpswt.hla.InteractionRoot;
import org.cpswt.hla.SubscribedInteractionFilter;
import org.cpswt.hla.SynchronizedFederate;

import org.cpswt.config.FederateConfig;
import org.cpswt.utils.CpswtDefaults;

import org.cpswt.*;

<% if(melderpackagename){ -%>
import <%= melderpackagename %>.<%= classname %>;
import <%= melderpackagename %>.<%= classname %>RTIFactory;
<% } -%>

public class <%= classname %>Base extends <% if(melderpackagename) { %><%= classname %><% }else{ %>SynchronizedFederate<% } %> {
<% if(melderpackagename){ -%>
        static {
                <%= classname %>RTIFactory rtiFactory = new <%= classname %>RTIFactory();
<% /*allinteractiondata:setfactoryvar()*/ -%>
                <% allinteractiondata.forEach(function(rticlass){ %>
                rtiFactory.set_<%= rticlass.name %>Interface( new <%= rticlass.name %>Melder() );<%});%>
<% /*allobjectdata:setfactoryvar()*/ -%>
                <% allobjectdata.forEach(function(rticlass){ %>
                rtiFactory.set_<%= rticlass.name %>Interface( new <%= rticlass.name %>Melder() );<%});%>

                <%= classname %>.set<%= classname %>RTIFactory( rtiFactory );
        }
<% } -%>
    private SubscribedInteractionFilter _subscribedInteractionFilter =
        new SubscribedInteractionFilter();

    // constructor
    public <%= classname %>Base(FederateConfig config) throws Exception {
        super(config);
        super.createLRC();
        super.joinFederation();
<% if(timeconstrained){ -%>
        enableTimeConstrained();
<% } -%>
<% if(timeregulating){ -%>
        enableTimeRegulation(getLookAhead());
<% } -%>
<% if(asynchronousdelivery){ -%>
        enableAsynchronousDelivery();
<% } -%>

        // interaction pubsub
<% /* publishedinteractiondata:pubinter() */ -%>
<% publishedinteractiondata.forEach(function(interactiondata){ -%>
        <%= interactiondata.name %>.publish(getLRC());
<% }); -%>
<% /* subscribedinteractiondata:subinter() */ -%>
<% subscribedinteractiondata.forEach(function(interactiondata){ -%>
        <%= interactiondata.codeNameOrName %>.subscribe(getLRC());
        _subscribedInteractionFilter.setFedFilters( 
           <%= interactiondata.codeNameOrName %>.get_handle(),
           SubscribedInteractionFilter.OriginFedFilter.<%= interactiondata.originFedFilter() %>,
           SubscribedInteractionFilter.SourceFedFilter.<%= interactiondata.srcFedFilter() %>);
<% }); -%>

        // object pubsub
<%/* publishedobjectdata:pubobjectdata() */ -%>
<% publishedobjectdata.forEach(function(objectdata){ -%>
<% objectdata.publishedAttributeData.forEach(function(a){ -%>
        <%= objectdata.codeNameOrName %>.publish_<%= a.name %>();
<% }); -%>
        <%= objectdata.codeNameOrName %>.publish(getLRC());
<% }); -%>
<%/* subscribedobjectdata:subobjectdata() */ -%>
<% subscribedobjectdata.forEach(function(objectdata){ -%>
<% objectdata.subscribedAttributeData.forEach(function(a){ -%>
        <%= objectdata.codeNameOrName %>.subscribe_<%= a.name %>();
<% }); -%>
        <%= objectdata.codeNameOrName %>.subscribe(getLRC());
<% }); -%>
    }

<%/* publishedinteractiondata:create_interaction() */ -%>
<%publishedinteractiondata.forEach(function(interaction_data){ -%>
    public <%= interaction_data.codeNameOrName %> create_<%= interaction_data.codeNameOrName %>() {
        <%= interaction_data.codeNameOrName%> interaction = new <%= interaction_data.codeNameOrName %>();
        interaction.set_sourceFed(getFederateId());
        interaction.set_originFed(getFederateId());
        return interaction;
    }
<% }); -%>

<%/* filter_interaction() */ -%>
    @Override
    public void receiveInteraction(int interactionClass,
                                   ReceivedInteraction theInteraction,
                                   byte[] userSuppliedTag) {
        InteractionRoot interactionRoot =
            InteractionRoot.create_interaction(interactionClass,
                                               theInteraction);
        if (interactionRoot instanceof C2WInteractionRoot) {
            C2WInteractionRoot c2wInteractionRoot =
                (C2WInteractionRoot)interactionRoot;

            // Filter interaction if src/origin fed requirements (if any)
            // are not met
            if (_subscribedInteractionFilter.filterC2WInteraction
                (getFederateId(), c2wInteractionRoot)) {
                return;
            }
        }
        super.receiveInteraction(interactionClass, theInteraction,
                                 userSuppliedTag);
    }

    @Override
    public void receiveInteraction(int interactionClass,
                                   ReceivedInteraction theInteraction,
                                   byte[] userSuppliedTag,
                                   LogicalTime theTime,
                                   EventRetractionHandle retractionHandle) {
        InteractionRoot interactionRoot =
            InteractionRoot.create_interaction(interactionClass,
                                               theInteraction, theTime);
        if (interactionRoot instanceof C2WInteractionRoot) {
            C2WInteractionRoot c2wInteractionRoot =
                (C2WInteractionRoot)interactionRoot;

            // Filter interaction if src/origin fed requirements (if any)
            // are not met
            if (_subscribedInteractionFilter.filterC2WInteraction
                (getFederateId(), c2wInteractionRoot)) {
                return;
            }
        }
        super.receiveInteraction(interactionClass, theInteraction,
                                 userSuppliedTag, theTime, retractionHandle);
    }
}
