package <%= simname %>;

import org.cpswt.config.FederateConfig;
import org.cpswt.config.FederateConfigParser;
<%if (subscribedobjectdata.length > 0) { -%>
import org.cpswt.hla.base.ObjectReflector;
import org.cpswt.hla.ObjectRoot;
<% } -%>
<% if (subscribedinteractiondata.length > 0) { -%>
import org.cpswt.hla.InteractionRoot;
<% } -%>
import org.cpswt.hla.base.AdvanceTimeRequest;
import org.cpswt.utils.CpswtDefaults;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 * The <%= classname %> type of federate for the federation designed in WebGME.
 *
 */
public class <%= classname %> extends <%= classname %>Base {

    private final static Logger log = LogManager.getLogger(<%= classname %>.class);

    double currentTime = 0;
<% if (publishedobjectdata.length > 0) { -%>

    ///////////////////////////////////////////////////////////////////////
    // TODO Instantiate objects that must be sent every logical time step
    //
<% publishedobjectdata.forEach(function(object_data){ -%>
    // <%=object_data.name%> v<%=object_data.name%> = new <%=object_data.name%>();
<% }) -%>
    //
    ///////////////////////////////////////////////////////////////////////
<% } -%>

    public <%= classname %>(FederateConfig params) throws Exception {
        super(params);
<% if (publishedobjectdata.length > 0) { -%>

        ///////////////////////////////////////////////////////////////////////
        // TODO Must register object instances after super(args)
        //
<% publishedobjectdata.forEach(function(object_data){ -%>
        // v<%=object_data.name%>.registerObject(getLRC());
<% }) -%>
        //
        ///////////////////////////////////////////////////////////////////////
<% } -%>
    }
<% if (subscribedinteractiondata.length + subscribedobjectdata.length > 0) { -%>

    private void CheckReceivedSubscriptions(String s) {
<% if (subscribedinteractiondata.length > 0) { -%>
<% var conditional = "if"; -%>

        InteractionRoot interaction = null;
        while ((interaction = getNextInteractionNoWait()) != null) {
<% subscribedinteractiondata.forEach(function(interaction_data){ -%>
            <%= conditional %> (interaction instanceof <%= interaction_data.name %>) {
                handleInteractionClass((<%= interaction_data.name %>) interaction);
            }
<% conditional = "else if"; -%>
<% }) -%>
            log.info("Interaction received and handled: " + s);
        }
 <% } -%>
<%if (subscribedobjectdata.length > 0) { -%>
<% conditional = "if"; -%>

        ObjectReflector reflector = null;
        while ((reflector = getNextObjectReflectorNoWait()) != null) {
            reflector.reflect();
            ObjectRoot object = reflector.getObjectRoot();
<%subscribedobjectdata.forEach(function(object_data){ -%>
            <%= conditional %> (object instanceof <%= object_data.name %>) {
                handleObjectClass((<%= object_data.name %>) object);
            }
<% conditional = "else if"; -%>
<%}) -%>
            log.info("Object received and handled: " + s);
        }
<% } -%>
    }
<% } -%>

    private void execute() throws Exception {
        if(super.isLateJoiner()) {
            currentTime = super.getLBTS() - super.getLookAhead();
            super.disableTimeRegulation();
        }

        /////////////////////////////////////////////
        // TODO perform basic initialization below //
        /////////////////////////////////////////////

        AdvanceTimeRequest atr = new AdvanceTimeRequest(currentTime);
        putAdvanceTimeRequest(atr);

        if(!super.isLateJoiner()) {
            readyToPopulate();
        }

        ///////////////////////////////////////////////////////////////////////
        // Call CheckReceivedSubscriptions(<message>) here to receive
        // subscriptions published before the first time step.
        ///////////////////////////////////////////////////////////////////////

        ///////////////////////////////////////////////////////////////////////
        // TODO perform initialization that depends on other federates below //
        ///////////////////////////////////////////////////////////////////////

        if(!super.isLateJoiner()) {
            readyToRun();
        }

        startAdvanceTimeThread();

        // this is the exit condition of the following while loop
        // it is used to break the loop so that latejoiner federates can
        // notify the federation manager that they left the federation
        boolean exitCondition = false;

        while (true) {
            currentTime += super.getStepSize();

            atr.requestSyncStart();
            enteredTimeGrantedState();
<% if (publishedinteractiondata.length > 0) { -%>

            ////////////////////////////////////////////////////////////////////////////////////////
            // TODO send interactions that must be sent every logical time step below.
            // Set the interaction's parameters.
            //
<% publishedinteractiondata.forEach(function(interaction_data){ -%>
            //    <%= interaction_data.name %> v<%= interaction_data.name %> = create_<%= interaction_data.name %>();
<% interaction_data.parameters.forEach(function(parameter) { -%>
            //    v<%= interaction_data.name %>.set_<%= parameter.name %>( < YOUR VALUE HERE > );
<% }) -%>
            //    v<%= interaction_data.name %>.sendInteraction(getLRC(), currentTime);
            //
<% }) -%>
            ////////////////////////////////////////////////////////////////////////////////////////
<% } -%>
<% if (publishedobjectdata.length > 0) { -%>

            ////////////////////////////////////////////////////////////////////////////////////////
            // TODO objects that must be sent every logical time step
            //
<% publishedobjectdata.forEach(function(object_data){ -%>
<% if (object_data.parameters.length > 0) { -%>
<% object_data.parameters.forEach(function(parameter) { -%>
            //    v<%= object_data.name %>.set_<%= parameter.name %>(<YOUR VALUE HERE >);
<% }) -%>
<% } -%>
            //    v<%= object_data.name %>.updateAttributeValues(getLRC(), currentTime);
            //
<% }) -%>
            //////////////////////////////////////////////////////////////////////////////////////////
<% } -%>
<% if (subscribedinteractiondata.length + subscribedobjectdata.length > 0) { -%>

            CheckReceivedSubscriptions("Main Loop");
<% } -%>

            // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            // DO NOT MODIFY FILE BEYOND THIS LINE
            // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            AdvanceTimeRequest newATR = new AdvanceTimeRequest(currentTime);
            putAdvanceTimeRequest(newATR);
            atr.requestSyncEnd();
            atr = newATR;

            if(exitCondition) {
                break;
            }
        }

        // while loop finished, notify FederationManager about resign
        super.notifyFederationOfResign();
    }
<%/* allinteractiondata:createInteraction() */ -%>
<%subscribedinteractiondata.forEach(function(interaction_data){ -%>

    private void handleInteractionClass(<%= interaction_data.name %> interaction) {
        //////////////////////////////////////////////////////////////////////////
        // TODO implement how to handle reception of the interaction            //
        //////////////////////////////////////////////////////////////////////////
    }
<%}); -%>
<%/* allobjectdata:createObject() */ -%>
<%subscribedobjectdata.forEach(function(object_data){ -%>

    private void handleObjectClass(<%= object_data.name %> object) {
        //////////////////////////////////////////////////////////////////////////
        // TODO implement how to handle reception of the object                 //
        //////////////////////////////////////////////////////////////////////////
    }
<%}); -%>

    public static void main(String[] args) {
        try {
            FederateConfigParser federateConfigParser = new FederateConfigParser();
            FederateConfig federateConfig = federateConfigParser.parseArgs(args, FederateConfig.class);
            <%= classname %> federate = new <%= classname %>(federateConfig);
            federate.execute();

            System.exit(0);
        } catch (Exception e) {
            log.error("There was a problem executing the <%= classname %> federate: {}", e.getMessage());
            log.error(e);

            System.exit(1);
        }
    }
}
