<% /*
input properties
----------------
alldatamembers
codeclassname
datamembers
hlaclassname
isinteraction
parentclassname

used in
-------
class.cpp.ejs
classroot.cpp.ejs

*/ -%>
void <%=codeclassname%>::init( RTI::RTIambassador *rti ) {
    static bool isInitialized = false;
    if ( isInitialized ) {
        return;
    }
    isInitialized = true;
<% if(parentclassname){ -%>

    <%=parentclassname%>::init( rti );
<% } -%>

    bool isNotInitialized = true;
    while ( isNotInitialized ) {
        try {
            getHandle() = rti->get<%=isinteraction?"Interaction":"Object"%>ClassHandle( "<%=hlaclassname%>" );
            isNotInitialized = false;
        } catch ( RTI::FederateNotExecutionMember & ) {
            std::cerr << getInitErrorMessage() << "Federate Not Execution Member" << std::endl;
            return;
        } catch ( RTI::NameNotFound & ) {
            std::cerr << getInitErrorMessage() << "Name Not Found" << std::endl;
            return;
        } catch ( ... ) {
            std::cerr << getInitErrorMessage() << "Exception caught ... retry" << std::endl;
        }
    }
    getClassNameHandleMap().insert(  std::make_pair( "<%=codeclassname%>", get_handle() )  );
    getClassHandleNameMap().insert(  std::make_pair( get_handle(), "<%=codeclassname%>" )  );
<% if(alldatamembers && alldatamembers.length > 0){ -%>
    isNotInitialized = true;
    while ( isNotInitialized ) {
        try {
<% /*alldatamembers:handle_init()*/ -%>
<% alldatamembers.forEach(function(datamember){ -%>
            get_<%=datamember.name%>_handle_var() = rti->get<%=isinteraction?"Parameter":"Attribute"%>Handle( "<%=datamember.name%>", get_handle() );
<% }); -%>
            isNotInitialized = false;
        } catch ( RTI::FederateNotExecutionMember & ) {
            std::cerr << getInitErrorMessage() << "Federate Not Execution Member" << std::endl;
            return;
        } catch ( RTI::<%=isinteraction?"Interaction":"Object"%>ClassNotDefined & ) {
            std::cerr << getInitErrorMessage() << "<%=isinteraction?"Interaction":"Object"%> Class Not Defined" << std::endl;
            return;
        } catch ( RTI::NameNotFound & ) {
            std::cerr << getInitErrorMessage() << "Name Not Found" << std::endl;
            return;
        } catch ( ... ) {
            std::cerr << getInitErrorMessage() << "Exception caught ... retry" << std::endl;
        }
    }
<% alldatamembers.forEach(function(datamember){ -%>
<% /*alldatamembers: { d |<initDatamemberNameHandleMap(codeclassname=codeclassname,datamember=d)>}*/ -%>
    getDatamemberNameHandleMap().insert(  std::make_pair( "<%=codeclassname%>.<%=datamember.name%>", get_<%=datamember.name%>_handle() )  );
<% /*alldatamembers:initDatamemberHandleNameMap()*/ -%>
    getDatamemberHandleNameMap().insert(  std::make_pair( get_<%=datamember.name%>_handle(), "<%=datamember.name%>" )  );
<% /*alldatamembers:initDatamemberTypeMap()*/ -%>
    getDatamemberTypeMap().insert( std::make_pair("<%=datamember.name%>", "<%=datamember.parameterType%>") );
<% }); -%>
<% } -%>
}

void <%=codeclassname%>::publish( RTI::RTIambassador *rti ) {
    if ( getIsPublished() ) {
        return;
    }
    init( rti );
<% if(!isinteraction){ -%>
    getPublishedAttributeHandleSet_var().empty();
    for ( StringVector::iterator stsItr = getPublishAttributeNameVector().begin() ;
    stsItr != getPublishAttributeNameVector().end() ;
    (void)++stsItr ) {
        try {
            getPublishedAttributeHandleSet_var().add(  getDatamemberNameHandleMap().find( "<%=codeclassname%>." + *stsItr )->second  );
        } catch ( ... ) {
            std::cerr << getPublishErrorMessage() << "Could not publish \"" << *stsItr + "\" attribute." << std::endl;
        }
    }
<% } -%>
    bool isNotPublished = true;
    while ( isNotPublished ) {
        try {
            rti->publish<%=isinteraction?"Interaction":"Object"%>Class( get_handle()<% if(!isinteraction){ %>, getPublishedAttributeHandleSet_var()<%}%> );
            isNotPublished = false;
        } catch ( RTI::FederateNotExecutionMember & ) {
            std::cerr << getPublishErrorMessage() << "Federate Not Execution Member" << std::endl;
            return;
        } catch ( RTI::<%=isinteraction?"Interaction":"Object"%>ClassNotDefined & ) {
            std::cerr << getPublishErrorMessage() << "<%=isinteraction?"Interaction":"Object"%> Class Not Defined" << std::endl;
            return;
        } catch ( ... ) {
            std::cerr << getPublishErrorMessage() << "Exception caught ... retry" << std::endl;
        }
    }
    getIsPublished() = true;
}

void <%=codeclassname%>::unpublish( RTI::RTIambassador *rti ) {
    if ( !getIsPublished() ) {
        return;
    }
    init( rti );
    bool isNotUnpublished = true;
    while ( isNotUnpublished ) {
        try {
            rti->unpublish<%=isinteraction?"Interaction":"Object"%>Class( get_handle() );
            isNotUnpublished = false;
        } catch ( RTI::FederateNotExecutionMember & ) {
            std::cerr << getUnpublishErrorMessage() + "Federate Not Execution Member" << std::endl;
            return;
        } catch ( RTI::<%=isinteraction?"Interaction":"Object"%>ClassNotDefined & ) {
            std::cerr << getUnpublishErrorMessage() + "<%=isinteraction?"Interaction":"Object"%> Class Not Defined" << std::endl;
            return;
        } catch ( RTI::<%=isinteraction?"Interaction":"Object"%>ClassNotPublished & ) {
            std::cerr << getUnpublishErrorMessage() + "<%=isinteraction?"Interaction":"Object"%> Class Not Published" << std::endl;
            return;
        } catch ( ... ) {
            std::cerr << getUnpublishErrorMessage() << "Exception caught ... retry" << std::endl;
        }
    }
    getIsPublished() = false;
}

void <%=codeclassname%>::subscribe( RTI::RTIambassador *rti ) {
    if ( getIsSubscribed() ) {
        return;
    }
    init( rti );
<% if(!isinteraction){ -%>
    getSubscribedAttributeHandleSet_var().empty();
    for ( StringVector::iterator sstItr = getSubscribeAttributeNameVector().begin() ;
          sstItr != getSubscribeAttributeNameVector().end() ;
          (void)++sstItr ) {
        try {
            getSubscribedAttributeHandleSet_var().add(  getDatamemberNameHandleMap().find( "<%=codeclassname%>." + *sstItr )->second  );
        } catch ( ... ) {
            std::cerr << getSubscribeErrorMessage() << "Could not subscribe to \"" << *sstItr << "\" attribute." << std::endl;
        }
    }
<% } -%>

    bool isNotSubscribed = true;
    while ( isNotSubscribed ) {
        try {
            rti->subscribe<% if(isinteraction){ %>InteractionClass( get_handle() )<% }else{ %>ObjectClassAttributes( get_handle(), getSubscribedAttributeHandleSet_var() )<%}%>;
            isNotSubscribed = false;
        } catch ( RTI::FederateNotExecutionMember & ) {
            std::cerr << getSubscribeErrorMessage() << "Federate Not Execution Member" << std::endl;
            return;
        } catch ( RTI::<%=isinteraction?"Interaction":"Object"%>ClassNotDefined & ) {
            std::cerr << getSubscribeErrorMessage() << "<%=isinteraction?"Interaction":"Object"%> Class Not Defined" << std::endl;
            return;
        } catch ( ... ) {
            std::cerr << getSubscribeErrorMessage() << "Exception caught ... retry" << std::endl;
        }
    }
    getIsSubscribed() = true;
}

void <%=codeclassname%>::unsubscribe( RTI::RTIambassador *rti ) {
    if ( !getIsSubscribed() ) {
        return;
    }
    init( rti );
    bool isNotUnsubscribed = true;
    while ( isNotUnsubscribed ) {
        try {
            rti->unsubscribe<%=isinteraction?"Interaction":"Object"%>Class( get_handle() );
            isNotUnsubscribed = false;
        } catch ( RTI::FederateNotExecutionMember & ) {
            std::cerr << getUnsubscribeErrorMessage() << "Federate Not Execution Member" << std::endl;
            return;
        } catch ( RTI::<%=isinteraction?"Interaction":"Object"%>ClassNotDefined & ) {
            std::cerr << getUnsubscribeErrorMessage() << "<%=isinteraction?"Interaction":"Object"%> Class Not Defined" << std::endl;
            return;
        } catch ( RTI::<%=isinteraction?"Interaction":"Object"%>ClassNotSubscribed & ) {
            std::cerr << getUnsubscribeErrorMessage() << "<%=isinteraction?"Interaction":"Object"%> Class Not Subscribed" << std::endl;
            return;
        } catch ( ... ) {
            std::cerr << getUnsubscribeErrorMessage() << "Exception caught ... retry" << std::endl;
        }
    }
    getIsSubscribed() = false;
}

bool <%=codeclassname%>::static_init( void ) {
    static bool isInitialized = false;
    if ( isInitialized ) {
        return true;
    }
    isInitialized = true;
    getClassNameSet().insert( "<%=codeclassname%>" );
    getClassNameFactoryMap().insert(  std::make_pair( "<%=codeclassname%>", &<%=codeclassname%>::factory )  );
    getClassNamePublishMap().insert(   std::make_pair(  "<%=codeclassname%>", (PubsubFunctionPtr)( &<%=codeclassname%>::publish )  )   );
    getClassNameUnpublishMap().insert(   std::make_pair(  "<%=codeclassname%>", (PubsubFunctionPtr)( &<%=codeclassname%>::unpublish )  )   );
    getClassNameSubscribeMap().insert(   std::make_pair(  "<%=codeclassname%>", (PubsubFunctionPtr)( &<%=codeclassname%>::subscribe )  )   );
    getClassNameUnsubscribeMap().insert(   std::make_pair(  "<%=codeclassname%>", (PubsubFunctionPtr)( &<%=codeclassname%>::unsubscribe )  )   );
    getDatamemberClassNameVectorPtrMap().insert(  std::make_pair( "<%=codeclassname%>", &getDatamemberNames() )  );
    getAllDatamemberClassNameVectorPtrMap().insert(  std::make_pair( "<%=codeclassname%>", &getAllDatamemberNames() )  );
<% if(datamembers && datamembers.length > 0){ -%>
<% /*datamembers:initDatamemberNameSet()*/ -%>
<% datamembers.forEach(function(datamember){ -%>
<% if(!datamember.hidden && !datamember.inherited){ -%>
    getDatamemberNames().push_back( "<%=datamember.name%>" );
<% } -%>
<% }); -%>
<% } -%>
<% if(alldatamembers && alldatamembers.length > 0){ -%>
<% /*alldatamembers:initAllDatamemberNameSet()*/ -%>
<% alldatamembers.forEach(function(datamember){ -%>
    getAllDatamemberNames().push_back( "<%=datamember.name%>" );
<% }); -%>
<% } -%>
<% if(!isinteraction){ -%>
    getClassNamePublishAttributeNameVectorPtrMap().insert(  std::make_pair( "<%=codeclassname%>", &getPublishAttributeNameVector() )  );
    getClassNameSubscribeAttributeNameVectorPtrMap().insert(  std::make_pair( "<%=codeclassname%>", &getSubscribeAttributeNameVector() )  );
    getClassNamePublishedAttributesPtrMap().insert(  std::make_pair( "<%=codeclassname%>", &getPublishedAttributeHandleSet_var() )  );
    getClassNameSubscribedAttributesPtrMap().insert( std::make_pair( "<%=codeclassname%>", &getSubscribedAttributeHandleSet_var() )  );
<% } -%>
    return true;
}

std::ostream &operator<<( std::ostream &os, <%=codeclassname%>::SP entitySP ) {
    return os << *entitySP;
}

std::ostream &operator<<( std::ostream &os, const <%=codeclassname%> &entity ) {
    return os << "<%=codeclassname%>("
<% alldatamembers.forEach(function(datamember,i){ -%>
             <% if( i > 0){%> << ", "<%}%> << "<%=datamember.name%>:" << entity.get_<%=datamember.name%>()
<% }); -%>
            << ")";
}
