<% /*
input properties
----------------
alldatamembers         array
classname              string
codeclassname          string
cppjavaArgumentTypeMap object
cppjavaTypeMap         object
datamembers            array
hlaclassname           string
isc2winteractionroot   boolean
isinteraction          boolean
parentclassname        string
TEMPLATES              object

used in
-------
CppRTI.js

This also uses ejs, but apparently ejs is available without being passed in.

*/ -%>

/*
 * Copyright (c) 2008, Institute for Software Integrated Systems,
 * Vanderbilt University
 * All rights reserved.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation for any purpose, without fee, and without written agreement is
 * hereby granted, provided that the above copyright notice, the following
 * two paragraphs and the author appear in all copies of this software.
 *
 * IN NO EVENT SHALL THE VANDERBILT UNIVERSITY BE LIABLE TO ANY PARTY FOR
 * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT
 * OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF THE VANDERBILT
 * UNIVERSITY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * THE VANDERBILT UNIVERSITY SPECIFICALLY DISCLAIMS ANY WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS
 * ON AN "AS IS" BASIS, AND THE VANDERBILT UNIVERSITY HAS NO OBLIGATION TO
 * PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
 *
 */

/*
 *     NOTE:  ALL "if" STATEMENTS IN THIS CODE THAT HAD THE FORM:
 *
 *  if (condition) statement;
 *
 *    OR
 *
 *  if (condition) statement1;
 *  else           statement2;
 *
 *  HAVE BEEN CONVERTED TO THE FORMS:
 *
 *  if (condition) {
 *        statement;
 *    }
 *
 *    AND
 *
 *  if (condition) {
 *        statement1;
 *    } else {
 *        statement2;
 *    }
 *
 * RESPECTIVELY.  THIS IS BECAUSE THE OMNET DEBUGGER APPEARS TO HAVE
 * A PROBLEM WITH THE NON-BRACED FORMS OF THE IF STATEMENT.
 *     *PLEASE* DO NOT CHANGE IT BACK.
 *  -- H.S.N.
 *
 */

#ifndef _<%=codeclassname%>_CLASS
#define _<%=codeclassname%>_CLASS

#include "<%=parentclassname%>.hpp"
#include "C2WException.hpp"
<% if(!isinteraction){ -%>
<% if(alldatamembers && alldatamembers.length > 0){ -%>

#include <boost/unordered_set.hpp>
<% }} -%>

class <%=codeclassname%> : public <%=parentclassname%> {
public:
    typedef <%=parentclassname%> Super;
    typedef boost::shared_ptr< <%=codeclassname%> > SP;

    static StringVector get_<%=isinteraction?"parameter":"attribute"%>_names() {
        return getDatamemberNames();
    }

    static StringVector get_all_<%=isinteraction?"parameter":"attribute"%>_names() {
        return getAllDatamemberNames();
    }

    <%=codeclassname%>( void ) { }

    static SP create( void ) { return SP( new <%=codeclassname%> ); }
<% if(alldatamembers && alldatamembers.length > 0){ -%>

private:
<% if(!isinteraction){ -%>
    static boost::unordered_set< std::string > m_publishedAttributeNames;

<% } -%>
<% /*alldatamembers:handle()*/ -%>
<% alldatamembers.forEach(function(datamember){ -%>
    static int &get_<%=datamember.name%>_handle_var( void ) {
        static int <%=datamember.name%>_handle;
        return <%=datamember.name%>_handle;
    }

<% }); -%>
public:
<% /*alldatamembers:gethandle()*/ -%>
<% alldatamembers.forEach(function(datamember){ -%>
    static int get_<%=datamember.name%>_handle( void ) { return get_<%=datamember.name%>_handle_var(); }
<% }); -%>
<% } -%>

<% /*classcommon(...)*/ -%>
<%- ejs.render(TEMPLATES["cpp/classcommon.hpp.ejs"], {
        alldatamembers: alldatamembers,
        classname: codeclassname,
        datamembers: datamembers,
        isinteraction: isinteraction,
        parentclassname: parentclassname
}) -%>
<% if(isc2winteractionroot){ -%>

public:
    void sendInteraction( RTI::RTIambassador *rti, double time );
    void sendInteraction( RTI::RTIambassador *rti );
<% } -%>
<% if(isinteraction){ -%>
<% if(datamembers && datamembers.length > 0){ -%>

private:
<% /*datamembers:interactionmembers()*/ -%>
<% datamembers.forEach(function(datamember){ -%>
    <%- cppjavaTypeMap[datamember.parameterType] %> _<%=datamember.name%>;
<% }); -%>

public:
<% /*datamembers:interactiongetters()*/ -%>
<% datamembers.forEach(function(datamember){ -%>
    void set_<%=datamember.name%>( <%- cppjavaArgumentTypeMap[datamember.parameterType] %> <%=datamember.name%> ) { _<%=datamember.name%> = <%=datamember.name%>; }

    <%- cppjavaArgumentTypeMap[datamember.parameterType] %> get_<%=datamember.name%>( void ) const { return _<%=datamember.name%>; }

<% }); -%>
<% } -%>
<% }else{ -%>
<% if(alldatamembers && alldatamembers.length > 0){ -%>

public:
<% alldatamembers.forEach(function(attribute){ -%>
<% /*alldatamembers:{ a |<publish(codeclassname=codeclassname,attribute=a)> }*/ -%>
    static void publish_<%=attribute.name%>( void ) {
        getPublishAttributeNameVector().push_back( "<%=attribute.name%>" );
        m_publishedAttributeNames.emplace( "<%=attribute.name%>" );
    }

    static void unpublish_<%=attribute.name%>( void ) {
        getPublishAttributeNameVector().erase( std::remove( getPublishAttributeNameVector().begin(), getPublishAttributeNameVector().end(), "<%=attribute.name%>" ), getPublishAttributeNameVector().end() );
        m_publishedAttributeNames.erase( "<%=attribute.name%>" );
    }

<% /*alldatamembers:{ a |<subscribe(codeclassname=codeclassname,attribute=a)> }*/ -%>
    static void subscribe_<%=attribute.name%>( void ) {
        getSubscribeAttributeNameVector().push_back( "<%=attribute.name%>" );
    }

    static void unsubscribe_<%=attribute.name%>(void ) {
        getSubscribeAttributeNameVector().erase( std::remove( getSubscribeAttributeNameVector().begin(), getSubscribeAttributeNameVector().end(), "<%=attribute.name%>" ), getSubscribeAttributeNameVector().end() );
    }

<% }); -%>
protected:
<% /*datamembers:objectmembers()*/ -%>
<% datamembers.forEach(function(datamember){ -%>
    Attribute< int, <%- cppjavaTypeMap[datamember.parameterType] %> > _<%=datamember.name%>;
<% }); -%>

public:
<% datamembers.forEach(function(datamember){ -%>
<% /*datamembers:objectsetters()*/ -%>
    void set_<%=datamember.name%>( <%- cppjavaArgumentTypeMap[datamember.parameterType] %> <%=datamember.name%> ) {
        _<%=datamember.name%>.setValue( <%=datamember.name%> );
        _<%=datamember.name%>.setTime( getTime() );
    }

<% /*datamembers:objectgetters()*/ -%>
    <%- cppjavaArgumentTypeMap[datamember.parameterType] %> get_<%=datamember.name%>( void ) const {
        return _<%=datamember.name%>.getValue();
    }

<% /*datamembers:objecttimegetters()*/ -%>
    double get_<%=datamember.name%>_time( void ) {
        return _<%=datamember.name%>.getTime();
    }

<% }); -%>
<% } -%>
<% } -%>
    <%=codeclassname%>( const RTI::<%=isinteraction?"Parameter":"Attribute"%>HandleValuePairSet &datamemberMap ) : Super( datamemberMap ) { }

    <%=codeclassname%>( const RTI::<%=isinteraction?"Parameter":"Attribute"%>HandleValuePairSet &datamemberMap, const RTIfedTime &logicalTime ) : Super( datamemberMap, logicalTime ) { }
<% if(datamembers && datamembers.length > 0){ -%>

public:
    TypeMedley get<%=isinteraction?"Parameter":"Attribute"%>( const std::string &datamemberName ) const {
<% /*first(datamembers):startgetbyname()*/ -%>
<% for(var i = 0; i<datamembers.length; i++ ){ -%>
<%= i == 0  ? '        if' : ' else if' %> ( "<%=datamembers[i].name%>" == datamemberName ) {
            return TypeMedley( get_<%=datamembers[i].name%>() );
        }<%}%> else {
            return Super::get<%=isinteraction?"Parameter":"Attribute"%>( datamemberName );
        }
    }

protected:
    virtual bool set<%=isinteraction?"Parameter":"Attribute"%>Aux( const std::string &datamemberName, const std::string &val ) {
        bool retval = true;
<% /*first(datamembers):startifstring()*/ -%>
<% for(var i = 0; i<datamembers.length; i++ ){ -%>
<%= i == 0  ? '        if' : ' else if'%> ( "<%=datamembers[i].name%>" == datamemberName ) {
            set_<%=datamembers[i].name%>(  TypeMedley( val )  );
        }<%}%> else {
            retval = Super::set<%=isinteraction?"Parameter":"Attribute"%>Aux( datamemberName, val );
        }

        return retval;
    }

    virtual bool set<%=isinteraction?"Parameter":"Attribute"%>Aux( const std::string &datamemberName, const TypeMedley &val ) {
        bool retval = true;
<% /*first(datamembers):startifname()*/ -%>
<% for(var i = 0; i<datamembers.length; i++ ){ -%>
<%= i == 0  ? '        if' : ' else if'%> ( "<%=datamembers[i].name%>" == datamemberName ) {
            set_<%=datamembers[i].name%>( val );
        }<%}%> else {
            retval = Super::set<%=isinteraction?"Parameter":"Attribute"%>Aux( datamemberName, val );
        }

        return retval;
    }
<% if(!isinteraction){ -%>

    virtual AttributeHandleValuePairSetSP createDatamemberHandleValuePairSet( bool force );
<% } -%>
<% } -%>
};

typedef <%=codeclassname%>::SP <%=codeclassname%>SP;

static bool call_<%=codeclassname%>_static_init = <%=codeclassname%>::static_init();

std::ostream &operator<<( std::ostream &os, <%=codeclassname%>::SP entitySP );
std::ostream &operator<<( std::ostream &os, const <%=codeclassname%> &entity );

#endif
