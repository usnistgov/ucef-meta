<% /*
input properties
----------------
alldatamembers
classname
datamembers
isinteraction
parentclassname

used in
-------
class.hpp.ejs
classroot.hpp.ejs

*/ -%>
private:
    static int &getHandle( void ) {
        static int handle;
        return handle;
    }

public:
    static int get_handle( void ) { return getHandle(); }
    static std::string get_class_name( void ) { return "<%=classname%>"; }

private:
    static StringVector &getDatamemberNames( void ) {
        static StringVector datamemberNames;
        return datamemberNames;
    }

    static StringVector &getAllDatamemberNames( void ) {
        static StringVector allDatamemberNames;
        return allDatamemberNames;
    }
<% if(!isinteraction){ -%>

private:
    static RTI::AttributeHandleSet &getPublishedAttributeHandleSet_var( void ) {
        static RTI::AttributeHandleSet *publishedAttributeHandleSetPtr = RTI::AttributeHandleSetFactory::create( <%= alldatamembers.length %> );
        return *publishedAttributeHandleSetPtr;
    }
    static StringVector &getPublishAttributeNameVector( void ) {
        static StringVector publishAttributeNameVector;
        return publishAttributeNameVector;
    }

    static RTI::AttributeHandleSet &getSubscribedAttributeHandleSet_var( void ) {
        static RTI::AttributeHandleSet *subscribedAttributeHandleSet = RTI::AttributeHandleSetFactory::create( <%= alldatamembers.length %> );
        return *subscribedAttributeHandleSet;
    }
    static StringVector &getSubscribeAttributeNameVector( void ) {
        static StringVector subscribeAttributeNameVector;
        return subscribeAttributeNameVector;
    }
<% } -%>

private:
<% if(isinteraction){ -%>
    static InteractionRoot::SP factory( void ) {
        return InteractionRoot::SP( new <%=classname%>() );
    }
<% }else{ -%>
    static ObjectRoot::SP factory( void ) {
        return ObjectRoot::SP( new <%=classname%>() );
    }
<% } -%>

    static std::string &getInitErrorMessage( void ) {
        static std::string initErrorMessage( "Error:  <%=classname%>:  could not initialize:  " );
        return initErrorMessage;
    }

protected:
    static void init( RTI::RTIambassador *rti );

private:
    static bool &getIsPublished( void ) {
        static bool isPublished = false;
        return isPublished;
    }

    static std::string &getPublishErrorMessage( void ) {
        static std::string publishErrorMessage = "Error:  <%=classname%>:  could not publish:  ";
        return publishErrorMessage;
    }

public:
    static void publish( RTI::RTIambassador *rti );

private:
    static std::string &getUnpublishErrorMessage( void ) {
        static std::string unpublishErrorMessage = "Error:  <%=classname%>:  could not unpublish:  ";
        return unpublishErrorMessage;
    }

public:
    static void unpublish( RTI::RTIambassador *rti );

private:
    static bool &getIsSubscribed( void ) {
        static bool isSubscribed = false;
        return isSubscribed;
    }
    static std::string &getSubscribeErrorMessage( void ) {
        static std::string subscribedErrorMessage = "Error:  <%=classname%>:  could not subscribe:  ";
        return subscribedErrorMessage;
    }

public:
    static void subscribe( RTI::RTIambassador *rti );

private:
    static std::string getUnsubscribeErrorMessage( void ) {
        static std::string unsubscribeErrorMessage = "Error:  <%=classname%>:  could not unsubscribe:  ";
        return unsubscribeErrorMessage;
    }

public:
    static void unsubscribe( RTI::RTIambassador *rti );

    static bool static_init( void );

    static bool match( int handle ) { return handle == get_handle(); }

    virtual int getClassHandle( void ) const { return get_handle(); }
    
    virtual std::string getClassName( void ) const { return get_class_name(); }
    
    virtual StringVector get<%=isinteraction?"Parameter":"Attribute"%>Names( void ) const { return get_<%=isinteraction?"parameter":"attribute"%>_names(); }
    
    virtual StringVector getAll<%=isinteraction?"Parameter":"Attribute"%>Names( void ) const { return get_all_<%=isinteraction?"parameter":"attribute"%>_names(); }
<% if(alldatamembers && alldatamembers.length > 0){ -%>

    virtual std::string get<%=isinteraction?"Parameter":"Attribute"%>Name( int datamemberHandle ) const {
<% for(var i = 0; i<alldatamembers.length; i++ ){ -%>
<%= i == 0 ? '        if' : ' else if'%> (datamemberHandle == get_<%=alldatamembers[i].name%>_handle()) {
            return std::string("<%=alldatamembers[i].name%>");
        }<% } %> else {
<% if(parentclassname){ -%>
            return <%=parentclassname%>::get<%=isinteraction?"Parameter":"Attribute"%>Name(datamemberHandle);
<% } else { -%>
            return std::string();
<% } -%>
        }
    }
<% } -%>

    virtual void publish<%=isinteraction?"Interaction":"Object"%>( RTI::RTIambassador *rti ) { publish( rti ); }

    virtual void subscribe<%=isinteraction?"Interaction":"Object"%>( RTI::RTIambassador *rti ) { subscribe( rti ); }

    virtual <%=isinteraction?"Interaction":"Object"%>Root::SP clone( void ) {
        return <%=isinteraction?"Interaction":"Object"%>Root::SP(  new <%=classname%>( *this )  );
    }
<% if(!isinteraction){ -%>

    virtual const RTI::AttributeHandleSet &getSubscribedAttributeHandleSet( void ) { return getSubscribedAttributeHandleSet_var(); }
<% } -%>
