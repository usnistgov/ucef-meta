<% /*
input properties
----------------
   classname (string)
   publishedinteractiondata (array of JavaScript objects)
      name (string)
      codeName (string)
      codeNameOrName (string)
      fullName (string)
      lowerName (string)
      parameters (array of JavaScript objects)
      publishedLogLevel (string)
   publishedobjectdata (array of JavaScript objects)
      name (string)
      codeName (string)
      codeNameOrName (string)
      fullName (string)
      lowerName (string)
      parameters (array of JavaScript objects)
      publishedAttributeData (array JavaScript objects)
      publishedLogLevel (string)
   subscribedinteractiondata (array of JavaScript objects)
      name (string)
      codeName (string)
      codeNameOrName (string)
      fullName (string
      lowerName (string)
      originFedFilter (function)
      parameters (array of JavaScript objects)
      srcFedFilter (function)
      subscribedLogLevel (string)
   subscribedobjectdata (array of JavaScript objects)
      name (string)
      codeName (string)
      codeNameOrName (string)
      fullName (string)
      lowerName (string)
      parameters (array of JavaScript objects)
      subscribedAttributeData (array JavaScript objects)
      subscribedLogLevel (string)
      logSubscribedAttributeData (array of JavaScript objects)

used in
-------
CppImplFederate.js
 
*/ -%>

<% var codeNameobjects = {}; -%>
<% var codeNameinteractions = {}; -%>
<% var n = 0; -%>
<% var m = 0; -%>
<% publishedobjectdata.forEach(function(object_data){ -%>
<% if (object_data.codeName) -%>
<% {codeNameobjects[object_data.codeName] = object_data.name;}}); -%>
<% subscribedobjectdata.forEach(function(object_data){ -%>
<% if (object_data.codeName) -%>
<% {codeNameobjects[object_data.codeName] = object_data.name;}}); -%>
<% for (var prop in codeNameobjects) {if (prop && (prop != null)) n++;} -%>
<% publishedinteractiondata.forEach(function(interact_data){ -%>
<% if (interact_data.codeName) -%>
<% {codeNameinteractions[interact_data.codeName] = interact_data.name;}}); -%>
<% subscribedinteractiondata.forEach(function(interact_data){ -%>
<% if (interact_data.codeName) -%>
<% {codeNameinteractions[interact_data.codeName] = interact_data.name;}}); -%>
<% for (var prop in codeNameobjects) {if (prop && (prop != null)) n++;} -%>
<% for (var prop in codeNameinteractions) {if (prop && (prop != null)) m++;} -%>
<% if (n + m) { -%>
// CodeGeneratedName is used if necessary. Otherwise, name is used.
<% } -%>
<% if (n) { -%>
// The following object classes have both CodeGeneratedName and name.
<% for (var prop in codeNameobjects){ -%>
<% if (prop && (prop != null)) { -%>
// CodeGeneratedName = <%= prop %>   name = <%= codeNameobjects[prop] %>
<% }}} -%>
<% if (m) { -%>
// The following interaction classes have both CodeGeneratedName and name.
<% for (var prop in codeNameinteractions){ -%>
<% if (prop && (prop != null)) { -%>
// CodeGeneratedName = <%= prop %>   name = <%= codeNameinteractions[prop] %>
<% }}} -%>


<% /* federateimpl(classname) */ -%>
#include "<%=classname%>.hpp"

void <%=classname%>::initialize( void ) {
    m_currentTime = 0;
    if ( this->get_IsLateJoiner() ) {
        m_currentTime = getLBTS() - getLookAhead();
        disableTimeRegulation();
    }
    <%=classname%>ATRCallback advanceTimeRequest(*this);
    putAdvanceTimeRequest(m_currentTime, advanceTimeRequest);
    if ( !this->get_IsLateJoiner() ) {
        readyToPopulate();
<% if (publishedobjectdata.length > 0) { -%>
        initObjectInstances();
<% } -%>
        readyToRun();
    }
<% if (publishedobjectdata.length > 0) { -%>
    else {
        initObjectInstances();
    }
<% } -%>
}
<% if (publishedobjectdata.length > 0) { -%>

void <%=classname%>::initObjectInstances() {
    // TODO register object instances and send initial values
<% publishedobjectdata.forEach(function(object_data) { -%>
    // v<%=object_data.codeNameOrName%>.registerObject(getRTI());
<% }) -%>
}
<% } -%>
<% if (subscribedobjectdata.length + subscribedinteractiondata.length > 0) { -%>

void <%=classname%>::checkReceivedSubscriptions() {
<% if (subscribedobjectdata.length > 0) { -%>

    SynchronizedFederate::ObjectReflector objectReflector;
    while ( !(objectReflector = getNextObjectReflector()).isNull() ) {
        objectReflector.reflect();

<% (subscribedobjectdata.sort(function(a, b){return b.fullName.length-a.fullName.length})).forEach(function(object_data){ -%>
        boost::shared_ptr<<%=object_data.codeNameOrName%>> <%=object_data.lowerName%>_ptr =
                boost::dynamic_pointer_cast<<%=object_data.codeNameOrName%>>(objectReflector.getObjectRootSP());
        if ( <%=object_data.lowerName%>_ptr != NULL ) {
            handleObjectClass(<%=object_data.lowerName%>_ptr);
            continue;
        }
<% }) -%>
        std::cerr << "unhandled object reflection " << objectReflector.getObjectRootSP()->getClassName() << std::endl;
    }
<% } -%>
<% if (subscribedinteractiondata.length > 0) { -%>

    InteractionRoot::SP interactionRootSP;
    while ( ( interactionRootSP = getNextInteraction() ) != 0 ) {
<% (subscribedinteractiondata.sort(function(a, b){return b.fullName.length-a.fullName.length})).forEach(function(interaction_data){ -%>
        boost::shared_ptr<<%=interaction_data.codeNameOrName%>> <%=interaction_data.lowerName%>_ptr =
                boost::dynamic_pointer_cast<<%=interaction_data.codeNameOrName%>>(interactionRootSP);
        if ( <%=interaction_data.lowerName%>_ptr != NULL ) {
            handleInteractionClass( <%=interaction_data.lowerName%>_ptr );
            continue;
        }
<% }) -%>
        std::cerr << "unhandled interaction " << interactionRootSP->getClassName() << std::endl;
    }
<% } -%>
}
<% } -%>

void <%=classname%>::execute( void ) {
<% if (subscribedobjectdata.length + subscribedinteractiondata.length > 0) { -%>
    checkReceivedSubscriptions();
<% } -%>
<% if (publishedobjectdata.length > 0) { -%>

    // TODO update registered object instances
<% publishedobjectdata.forEach(function(object_data) { -%>

<% object_data.parameters.forEach(function(parameter) { -%>
    // v<%=object_data.codeNameOrName%>.set_<%=parameter.name%>( YOUR_VALUE_HERE );
<% }) -%>
    // v<%=object_data.codeNameOrName%>.updateAttributeValues( getRTI(), m_currentTime + getLookAhead() );
<% }) -%>
<% } -%>
<% if (publishedinteractiondata.length > 0) { -%>

    // TODO send interactions
<% publishedinteractiondata.forEach(function(interaction_data) { -%>

    // <%=interaction_data.codeNameOrName%>SP v<%=interaction_data.codeNameOrName%> = create_<%=interaction_data.codeNameOrName%>();
<% interaction_data.parameters.forEach(function(parameter) { -%>
    // v<%=interaction_data.codeNameOrName%>->set_<%=parameter.name%>( YOUR_VALUE_HERE );
<% }) -%>
    // v<%=interaction_data.codeNameOrName%>->sendInteraction( getRTI(), m_currentTime + getLookAhead() );
<% }) -%>
<% } -%>
    
    m_currentTime += 1;
    <%=classname%>ATRCallback advanceTimeRequest( *this );
    putAdvanceTimeRequest( m_currentTime, advanceTimeRequest );
}
<% subscribedobjectdata.forEach(function(object_data) { -%>

void <%=classname%>::handleObjectClass(boost::shared_ptr<<%=object_data.codeNameOrName%>> object) {
    // TODO implement how to handle received object update
}
<% }); -%>
<% subscribedinteractiondata.forEach(function(interaction_data) { -%>

void <%=classname%>::handleInteractionClass(boost::shared_ptr<<%=interaction_data.codeNameOrName%>> interaction) {
    // TODO implement how to handle received interaction
}
<% }); -%>

int main( int argc, char *argv[] ) {
    FederateConfigParser *configParser = new FederateConfigParser();
    FederateConfig *config = configParser->parseArgs( argc, argv );
    std::cout << "Creating <%=classname%> instance" << std::endl;
    <%=classname%> federateInstance( config );
    federateInstance.initialize();
    std::cout << "Running <%=classname%> instance" << std::endl;
    federateInstance.run();
    return 0;
}
